// Full example
class PresenterBehavior<out T>(
    private val presenter: ContractPresenter<T>,
    private val contract: PresenterBehavior.Contract<T>
) : LifecycleObserver where T : ContractView {

    @OnLifecycleEvent(Lifecycle.Event.ON_START)
    fun onStart() {
        presenter.subscribe(contract.getView()) // PRESENTER
    }

    @OnLifecycleEvent(Lifecycle.Event.ON_STOP)
    fun onStop() {
        presenter.unsubscribe() // PRESENTER
    }

    interface Contract<T> {
        fun getView(): T
    }
}

class TrackingBehavior(
    private val contract: TrackingBehavior.Contract
) : LifecycleObserver {

    @OnLifecycleEvent(Lifecycle.Event.ON_CREATE)
    fun onCreate() {
        TrackingService.track(contract.getName()) // TRACKING
    }

    interface Contract {
        fun getName(): String
    }
}

class CustomHeaderBehavior(
    private val contract: CustomHeaderBehavior.Contract,
    private val activity: Activity
) : LifecycleObserver {

    @OnLifecycleEvent(Lifecycle.Event.ON_CREATE)
    fun onCreate() {
        activity.apply {
            findViewById<TextView>(R.id.header_custom_title).text =
                getString(contract.getCustomTitle()) // HEADER
        }
    }

    interface Contract {
        fun getCustomTitle(): Int
    }
}

class HelloActivity : BaseActivity(),
    HelloContractView,
    CustomHeaderBehavior.Contract,
    TrackingBehavior.Contract,
    PresenterBehavior.Contract<HelloContractView> {

    private val customHeaderBehavior by lazy { CustomHeaderBehavior(this, this) }
    private val presenterBehavior by lazy { PresenterBehavior(HelloPresenter(), this) }
    private val trackingBehavior by lazy { TrackingBehavior(this) }

    override fun getView(): HelloContractView = this
    override fun getCustomTitle(): Int = R.string.hello_title
    override fun getLayout(): Int = R.layout.activity_hello
    override fun getName(): String = "Hello"

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        // Subscribe observer to lifecycle
        lifecycle.addObserver(presenterBehavior)
        lifecycle.addObserver(trackingBehavior)
        lifecycle.addObserver(customHeaderBehavior)
    }

    override fun showMessage(message: String) {
        textView.text = message
    }
}
